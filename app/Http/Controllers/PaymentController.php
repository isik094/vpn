<?php

namespace App\Http\Controllers;

use App\Enums\PaymentStatusEnum;
use App\Http\Requests\PaymentCallbackRequest;
use App\Models\Payment;
use App\Services\OutlineVpnService;
use GuzzleHttp\Exception\GuzzleException;
use Illuminate\Contracts\Routing\ResponseFactory;
use Illuminate\Foundation\Application;
use Illuminate\Http\Response;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
 *
 * @class PaymentController
 */
class PaymentController extends Controller
{
    /**
     * –ü—Ä–∏–Ω—è—Ç—å –∫–æ–ª–ª–±—ç–∫ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —à–ª—é–∑–∞ WATA
     *
     * @param PaymentCallbackRequest $request
     * @return ResponseFactory|Application|Response|object
     */
    public function callback(PaymentCallbackRequest $request)
    {
        \Log::info('callback hit');
        try {
            $data = $request->validated();
            /** @var Payment $payment */
            $payment = Payment::find($data['orderId']);

            if ($payment === null) {
                logger()->error('Payment not found');
                return response(status: 404);
            }

            if ($payment->isPaid() || $payment->isDeclined()) {
                logger()->error('Payment has been processed');
                throw new \Exception('Payment has been processed');
            }

            $payment->setCallbackData($data);
            $payment->setPaymentTime($data['paymentTime']);
            $payment->setStatus(PaymentStatusEnum::getEnumObject($data['transactionStatus']));

            if (!$payment->save()) {
                logger()->error('Payment failed to save');
                throw new \Exception("Payment failed to save");
            }

            if ($payment->isPaid()) {
                $outlineVpnService = new OutlineVpnService();
                $vpnKey = $outlineVpnService->createKey($payment->chat_id);

                if ($vpnKey === null) {
                    logger()->error('Failed to create key');
                    throw new \Exception("Failed to create key");
                }

                $vpnKey->setExpiredAt($payment->tariff, $data['paymentTime']);

                if (!$vpnKey->save()) {
                    logger()->error('Failed to save vpn');
                    throw new \Exception("Failed to save vpn");
                }

                $message = $this->getMessage($vpnKey->accessUrl, $vpnKey->expired_at);
                $payment->chat->message($message)->send();
            }

            return response(status: 200);
        } catch (\Exception $e) {
            logger()->error('Payment Callback Error: ' . $e->getMessage());
            return response(status: 500);
        } catch (GuzzleException $e) {
            logger()->error('Payment Callback Error: ' . $e->getMessage());
            return response(status: 500);
        }
    }

    /**
     * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     *
     * @param string $key
     * @param string $expiredDate
     * @return string
     */
    private function getMessage(string $key, string $expiredDate): string
    {
        return <<<MARKDOWN
        üöÄ *–í–æ—Ç –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Outline VPN* üöÄ

        üîë *–ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞:*
        `$key`

        üìÖ *–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:* {$expiredDate}

        üì• *–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:*
        1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline
        2. –ù–∞–∂–º–∏—Ç–µ "+" –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á
        3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º!

        üõ°Ô∏è *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
        - –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–ª—é—á —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
        - –û–±–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á –ø—Ä–∏ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–∏ –Ω–∞ —É—Ç–µ—á–∫—É

        –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üåê‚ú®
        MARKDOWN;
    }
}
