<?php

declare(strict_types=1);

namespace App\Telegram;

use App\Enums\LanguageEnum;
use App\Models\Tariff;
use App\Services\ChatLanguageService;
use DefStudio\Telegraph\Facades\Telegraph;
use DefStudio\Telegraph\Handlers\WebhookHandler;
use DefStudio\Telegraph\Keyboard\Button;
use DefStudio\Telegraph\Keyboard\Keyboard;
use Illuminate\Support\Stringable;

/**
 * @class Handler
 */
class Handler extends WebhookHandler
{
    use TelegraphTrait;

    /**
     * –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
     *
     * @return void
     */
    public function start(): void
    {
        $currentLanguage = $this->getLanguageChatValue();
        $startMessage = $currentLanguage === null
            ? __('messages.welcome', locale: LanguageEnum::RU->value)
            : __('messages.change_language', locale: $currentLanguage);

        $ruLanguage =  __('messages.language', locale: LanguageEnum::RU->value);
        $enLanguage =  __('messages.language', locale: LanguageEnum::EN->value);

        $this->chat->message($startMessage)
            ->keyboard(
                Keyboard::make()->buttons([
                    Button::make($ruLanguage)->action('language')->param('lang', LanguageEnum::RU->value),
                    Button::make($enLanguage)->action('language')->param('lang', LanguageEnum::EN->value),
                ])
            )->send();
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     *
     * @return void
     * @throws \Exception
     */
    public function language(): void
    {
        $chat = $this->chat;
        $lang = $this->data->get('lang');

        if (!LanguageEnum::tryFrom($lang)) {
            $chat->message('The language selected is incorrect.')->send();
            return;
        }

        if (ChatLanguageService::setLanguage($chat, $lang)) {
            $chat->message( __('messages.info_message', locale: $lang))
                ->keyboard(Keyboard::make()->buttons(Tariff::getButtons($lang)))
                ->send();
        }
    }

    /**
     * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
     *
     * @return void
     */
    public function payment(): void
    {
        $chat = $this->chat;
        $countMonth = $this->data->get('count_month');
        $currentLanguage = $this->getLanguageChatValue();

        if (!Tariff::where('count_month', $countMonth)->exists()) {
            $chat->message('The count month selected is incorrect.')->send();
            return;
        }

        $chat->message(__('messages.payment', ['url' => 'https://www.ya.ru'], $currentLanguage))->send();
    }

    public function paymentCallback(): void
    {
        // todo –ø—Ä–∏–Ω—è—Ç—å –ø–ª–∞—Ç–µ–∂ –∏ —á–∞—Ç id –∏ –≤—ã–¥–∞—Ç—å qr-code –∏ —Ñ–∞–π–ª
    }

    public function hello(string $name): void
    {
        $this->reply("Hello, world! $name");
    }

    public function help(): void
    {
        $this->reply('*Hello!* —è –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç');
    }

    public function buttons(): void
    {
        Telegraph::message('hello world')
            ->keyboard(
                Keyboard::make()->buttons([
                    Button::make('open')->url('https://test.it'),
                    Button::make('Web App')->action('like'),
                    Button::make('Web App')->action('test')->param('name', 'isik'),
                ])
            )->send();
    }

    public function test(): void
    {
        $name = $this->data->get('name');
        $this->reply("Hello, world! $name");
    }

    public function like(): void
    {
        Telegraph::message('–°–ø–∞—Å–∏–±–æ –∑–∞ –ª–∞–π–∫!')->send();
        $this->reply('–ö—Ä–∞—Å–∞–≤–∞ —á—Ç–æ –æ—Ü–µ–Ω–∏–ª ! üëç');
    }

    protected function handleUnknownCommand(Stringable $text): void
    {
        $this->reply('–Ø –µ—â–µ –Ω–µ –Ω–∞—É—á–∏–ª—Å—è –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É, –ø—Ä–µ–¥–ª–æ–∂–∏ –µ–µ –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—Ü –ø–æ—á—Ç–µ isik@icloud.com');
    }

    protected function handleChatMessage(Stringable $text): void
    {
        $this->reply('–í—ã–ø–æ–ª–Ω—è–ª —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É, —è –Ω–µ —Ö–æ—á—É —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è');
    }
}
